1. spring : https://docs.spring.io/spring-framework/docs/
	
	- Spring Framework
		- 자바 플랫폼을 위한 오픈소스 애플리케이션 프레임워크
		- POJO (Plain Old Java Object) 기반의 구성 : 일반적인 Java 코드로 객체 구성 가능(특정 라이브러리에 종속적이지 않음)
		- 엔터프라이즈급 애플리케이션 개발을 위한 종합 기능 경량화 솔루션
		- 경량화라는 말 = 기능별로 모듈화
		- 핵심 키워드 : IoC (Inversion of Control), DI (Dependency Injection), Bean 
			https://docs.spring.io/spring-framework/docs/5.0.0.RC2/spring-framework-reference/images/spring-overview.png
			
			- Core
				spring-core : Bean-Factory, IoC (Inversion of Control), ...
				
			- Context 
				spring-context : Application Lifecycle Event, ... --> Core 확장
			
			- Web
				spring-web : File Upload, Servlet Listener 등 
				spring-webmvc : Spring MVC, REST 웹 서비스 구현
				
			- Data Access / Interation
				spring-jdbc : Java JDBC Programming
				spring-tx : Transaction
				spring-orm : ORM (Object/Relation Mapping) API (JPA, JDO, Hibernate, ...etc)
				
			 - AOP
			 	spring-AOP : Aspect Oriented Programming
				spring-aspects : AspectJ 통합
				
			 - ...
			
	- STS
	* https://github.com/spring-attic/toolsuite-distribution/wiki/Spring-Tool-Suite-3#full-distribution-on-eclipse-416
		- win : https://download.springsource.com/release/STS/3.9.15.RELEASE/dist/e4.16/spring-tool-suite-3.9.15.RELEASE-e4.16.0-win32-x86_64.zip
		- mac : https://download.springsource.com/release/STS/3.9.15.RELEASE/dist/e4.16/spring-tool-suite-3.9.15.RELEASE-e4.16.0-macosx-cocoa-x86_64.dmg
		- Spring Tool Suite
		- Eclipse 기반의 Spring Framework 애플리케이션 개발을 위한 환경(IDE)

		- Settings
			1. JDK 설치 및 버전 확인
			2. 버전에 맞는 STS 다운로드
			3. 00.spring에 STS 압축해제 폴더 및 tomcat 서버 폴더
			4. spring.exe 실행 후 > workspace : C:\multi\05.spring > encoding, tomcat server 세팅
			
		- 실습 프로젝트 생성
			1. New > Spring Legacy Project > Spring MVC Project
			2. 패키지 이름은 도메인(예시, naver.com, google.com, ...)을 역으로 기재(com.naver, ...)
		
2. Maven
	* https://maven.apache.org/
	* https://mvnrepository.com/
	- Java 기반 프로젝트의 라이프사이클 관리를 위한 빌드 도구
	- 소스코드 컴파일, 프로젝트 빌드 수행 및 테스트, Deploy 배포 자원 관리 환경 제공, 버전별 라이브러리 관리 기능, ...
	- 중앙 저장소(mvnrepository)를 통한 자동 의존성 관리
	- pom.xml 파일을 통해 설정 관리

	- Maven Project 생성 정보
		- Group Id : 프로젝트 또는 라이브러리를 식별하기 위해 네임스페이스(namespace), 고유 값 사용
					 ex)com.maven.project
		- Artifact Id : 제품명(프로젝트 명)
						소문자 사용,  '-'(하이픈) or '.'(도트)로 구분 가능
		- Packaging : 프로젝트 결과 패키징 방식, 일반 자바 프로젝트 : .jar(Java Archive), 웹 프로젝트 : warWeb application ARchive)
		- Version : Artifact 버전, 기본은 0.0.1-SNAPSHOT
					개발 : SNAPSHOT, 배포 : RELEASE
					생략 가능
		- pom(Project Object Model)는 프로젝트의 라이브러리 의존성(dependencies), 모듈(modules), 정보(properties), 저장소(repositories), 빌드(build) 등을 관리하는 관리 파일입니다.
		- Name : Artifact 명
		- Description : Artifact 설명

3. Project Structure
	* https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-servlet-context-hierarchy
	- src/main/java 			: 자바 소스 코드
	- src/main/resources 		: 프로젝트 실행시 필요한 설정 (xml, properties, ...)
	- src/main/webapp 			: maven을 통해 생성된 Web 프로젝트 기본 directory
	- src/main/resources 		: static 파일(js, css, image, ...)
	- src/main/webapp/WEB-INF 	: 외부에서 접근 불가능 폴더
	- src/main/webapp/WEB-INF/classes 	: 컴파일된 클래스 파일
	- src/main/webapp/WEB-INF/spring 	: 스프링 환경 설정 파일
	- src/main/webapp/WEB-INF/views 	: 프로젝트 페이지 파일(html, jsp)
	- src/test/java 		: 자바 테스트 코드
	- src/test/resources 	: 테스트시 필요한 설정
	- servlet-context.xml 	: servlet 요청관련 객체 정의(ViewResolver, Interceptor, 등)
	- root-context.xml 		: view 기능을 제외한  비즈니스 로직 객체 설정(service, repository, 등)
	- web.xml 	: WAS 구동시 웹 관련 설정
	- pom.xml 	: Maven 설정 파일
	
	
	1.encoding변경
	2.pom.xml -> java버전 변경 -> pom.xml->maven->update project
	
	
	
	
	
	
	
	
	
	
	
	
	
	